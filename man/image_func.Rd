% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/image_func.R
\name{image_func}
\alias{image_func}
\title{Apply function to each image}
\usage{
image_func(stimuli, func, ...)
}
\arguments{
\item{stimuli}{list of class stimlist}

\item{func}{the function or a string with the short name of the magick function (e.g., "blur" for \code{image_blur()}}

\item{...}{arguments to pass to the function}
}
\value{
stimlist with new images
}
\description{
This is a convenience function for applying {magick} functions that take an image as the first argument and return an image. It's fully vectorised, so you can set separate argument values for each image.
}
\examples{
stimuli <- demo_stim()

# use magick::image_* functions
image_func(stimuli, "fill", 
           color = "black", 
           fuzz = 10, 
           point = "+0+10")

blur <- image_func(stimuli, "blur", 5, 3)
oilpaint <- image_func(stimuli, "oilpaint", radius = 5)
negate <- image_func(stimuli, "negate")
greenscreen <- image_func(stimuli, "transparent", 
                          color = "green", fuzz = 5)
colorize <- image_func(stimuli, "colorize", opacity = 50,
                       color = c("hotpink", "dodgerblue"))
sharpen <- image_func(stimuli, "contrast", sharpen = 1)

# load a logo image and superimpose it on each image
logo <- system.file("extdata/logo.png", package = "webmorphR") |>
  magick::image_read() |>
  magick::image_resize(100)
image_func(stimuli, "composite", logo, offset = "+10+10")

# use a self-defined function
testfunc <- function(image) {
  image # just return the image unprocessed
}
test <- image_func(stimuli, testfunc)

}
