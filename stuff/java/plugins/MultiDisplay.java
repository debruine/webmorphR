/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MultiDisplay.java
 *
 * Created on 13-Oct-2010, 18:40:12
 */

package plugins;

import Facemorph.FloatImage;
import Facemorph.Template;
import Facemorph.Transformer;
import Facemorph.haar.HaarReader;
import Facemorph.oesf.OESF;
import Facemorph.psychomorph.ImageZoomPanel;
import Facemorph.psychomorph.PsychoMorphForm;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Simple class to display a grid of images (used to make an image for a recent paper)
 * @author bpt
 */
public class MultiDisplay extends javax.swing.JFrame {
    ImageZoomPanel[] izp = new ImageZoomPanel[4*3];
    JFileChooser chooser = new JFileChooser();
    HaarReader haar;
    /** Creates new form MultiDisplay */
    public MultiDisplay() {
        initComponents();
        for (int i=0; i<12; i++) {
                izp[i] = new ImageZoomPanel();
                this.getContentPane().add(izp[i]);
            }
       // haar = new HaarReader();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(4, 3));

        jMenu1.setText("File");

        jMenuItem1.setText("Load Image");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Load FloatImage");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (haar == null) {
            chooser = PsychoMorphForm.setUpFileDialog(chooser, "OpenCV XML file", "xml");

            int ok = chooser.showOpenDialog(this);
            File f = chooser.getSelectedFile();
            if (f == null || ok != JFileChooser.APPROVE_OPTION) {
                return;
            }
            haar = new HaarReader(f.getPath(), false);
        }

        chooser = PsychoMorphForm.setUpFileDialog(chooser, "Image file", "jpg");

        int ok = chooser.showOpenDialog(this);
        File f = chooser.getSelectedFile();
        if (f==null || ok!=JFileChooser.APPROVE_OPTION) return;

        chooser = PsychoMorphForm.setUpFileDialog(chooser, "Template file", "tem");

        ok = chooser.showOpenDialog(this);
        File f2 = chooser.getSelectedFile();
        if (f2==null || ok!=JFileChooser.APPROVE_OPTION) return;


        String winStr = JOptionPane.showInputDialog("Which view?");
        int win=0;

            win = Integer.parseInt(winStr);
        try {
            BufferedImage bimg = javax.imageio.ImageIO.read(f);
            Rectangle rect = OESF.detectFace(bimg, haar);
            rect = enlarge(1.2f, rect);
            bimg = bimg.getSubimage(rect.x, rect.y, rect.width, rect.height);
            int size = 128;
            bimg = Transformer.ImageToBufferedImage(bimg.getScaledInstance(size, size, Image.SCALE_AREA_AVERAGING), this);
            Template tem = new Template();
            tem.read(f2.getPath());
            tem.zoom(size/(float)rect.width, size/(float)rect.height, rect.x, rect.y);
            izp[win].setImage(bimg);
            izp[win].setTemplate(tem);
        } catch (IOException ex) {
            Logger.getLogger(MultiDisplay.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        chooser = PsychoMorphForm.setUpFileDialog(chooser, "FloatImage file", "fimg");

        int ok = chooser.showOpenDialog(this);
        File f = chooser.getSelectedFile();
        if (f==null || ok!=JFileChooser.APPROVE_OPTION) return;
        FloatImage fimg = new FloatImage();
            fimg.read(f.getPath());
            String scaleStr = JOptionPane.showInputDialog(this,"Scale factor", "1");
            String shiftStr = JOptionPane.showInputDialog(this,"Shift factor", "0");
            float scale = Float.parseFloat(scaleStr);
            float shift = Float.parseFloat(shiftStr);
            fimg = fimg.shift(shift, scale);
            String[] options = {"Yes", "No"};
            int cent = JOptionPane.showOptionDialog(this, "Centre?", "Centre?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, 0);
            if (cent==0) fimg =OESF.centre(fimg);
            BufferedImage bimg = FloatImage.reconvertImage(fimg, fimg, fimg);
            String winStr = JOptionPane.showInputDialog("Which view?");
        int win=0;

            win = Integer.parseInt(winStr);
            izp[win].setImage(bimg);
    }//GEN-LAST:event_jMenuItem2ActionPerformed


    private Rectangle enlarge(float percent, Rectangle rect) {
        int imgW = 250, imgH=250;
        float left = rect.x-(percent-1)*rect.width/2f;
        float top = rect.y;
        float width = rect.width*percent;
        float height = rect.height*percent;
        if (left<0) left=0;
        if (left+width>imgW) left = imgW-width;
        if (top+height>imgH) top = imgH-height;
     Rectangle big = new Rectangle((int)(left),
                (int)(top), (int)(width), (int)(height));
        return big;

      /*  Rectangle big = new Rectangle((int)(rect.x-(percent-1)*rect.width/2f),
                (int)(rect.y-(percent-1)*rect.height/2f), (int)(rect.width*percent), (int)(rect.height*percent));
        return big;
       * */
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MultiDisplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    // End of variables declaration//GEN-END:variables

}
